import os
import asyncio
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatMemberStatus
from aiogram.types import Message, ChatMemberUpdated, ChatMemberAdministrator
from aiogram.filters import Command

from loguru import logger


from dotenv import load_dotenv

from database import prepare_db, get_strictness_level, set_strictness_level, add_chat, add_deleted

load_dotenv()

SECONDS_TO_DELETE = int(os.getenv('SECONDS_TO_DELETE'))
TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher()


SPAM_KEYWORDS = [
    '—Å–∫–∏–¥–∫', '–∞–∫—Ü–∏', '–ø–æ–¥–±–æ—Ä–∫', '—Ç—É—Ä', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω',
    '–ø–µ—Ä–µ—Ö–æ–¥', '–∫—É–ø–∏', '–∑–∞–∫–∞–∑', '–≤—ã–≥–æ–¥', '–ª—É—á—à',
    '–≥–æ—Ä—è—â', '–ø—Ä–æ–º–æ', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂', '—Ü–µ–Ω–∞', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º',
    '–∫–∞–Ω–∞–ª', '—Ñ—É–ª–ª', '—Ä–∞–±–æ—Ç–∞', '–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–∑–∞—Ä–ø–ª',
    '–æ—Ñ–æ—Ä–º', '–∞—Ä–±–∏—Ç—Ä–∞–∂', '–ø–æ–¥–∞—Ä–æ–∫', '–æ—Ç–∑—ã–≤—ã', '–æ–ø–ª–∞—Ç–∞',
    '–ø—Ä–æ–≥–Ω–æ–∑—ã', '—Å—Ç–∞–≤–∫–∏', '18+', '–±–ª–æ–≥',
]

EMOJI_PATTERNS = [r'‚Üë', r'üëÜ', r'üî•', r'üí•', r'ü§ë', r'üëá', r'‚ùó', r'‚ö†']



def spam_bot_probability(nickname: str, bio: str, comment_text: str, time_diff_seconds: int):
    probability = 0.0

    bio = bio.lower()

    bio_keywords = sum(1 for word in SPAM_KEYWORDS if word in bio)
    probability += min(0.3, bio_keywords * 0.1)

    emoji_count = sum(1 for pattern in EMOJI_PATTERNS if re.search(pattern, bio))
    probability += min(0.2, emoji_count * 0.05)


    if len(bio) > 0:
        uppercase_ratio = sum(1 for c in bio if c.isupper()) / len(bio)
        if uppercase_ratio > 0.7:
            probability += 0.15

    if re.search(r'\d{3,}', nickname) or re.search(r'([a-zA-Z])\1{2,}', nickname):
        probability += 0.1

    comment = comment_text.lower()

    if re.search(r'(http|www|\.ru|\.com|t\.me)', comment):
        probability += 0.25

    comment_spam_words = sum(1 for word in SPAM_KEYWORDS if word in comment)
    probability += min(0.25, comment_spam_words * 0.05)

    word_count = len(comment_text.split())
    if time_diff_seconds > 0:
        speed = (word_count / time_diff_seconds) * 60
        if speed > 120:
            probability += 0.2
        elif speed > 80:
            probability += 0.1

    return min(probability, 1.0)


async def delete_after(*messages: Message, seconds: int = 10):
    await asyncio.sleep(seconds)
    for msg in messages:
        await msg.delete()


@dp.message(Command('start'))
async def start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∞–º –±–æ—Ç–æ–≤.')


@dp.my_chat_member()
async def my_chat_member_handler(event: ChatMemberUpdated):
    if event.old_chat_member.status in ['left', 'kicked', 'restricted'] and event.new_chat_member.status in ['member', 'administrator']:
        await add_chat(event.chat.id)
        await event.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —á–∞—Ç. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–ø–∞–º –±–æ—Ç–æ–≤.\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /strictness.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –º–Ω–µ –∞–¥–º–∏–Ω–∫—É —Å –ø—Ä–∞–≤–æ–º –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—â—ë —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏.')


@dp.message(Command('strictness'))
async def strictness_command(message: Message):
    if message.chat.type == 'private':
        tmsg = await message.reply('–°—Ç—Ä–æ–≥–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.')
        await delete_after(message, tmsg)
        return
    args = message.text.split(' ')
    if len(args) != 2:
        strictness_level = await get_strictness_level(message.chat.id)
        tmsg = await message.reply(f'–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –≤ —á–∞—Ç–µ: {strictness_level}.\n–ß–µ–º –Ω–∏–∂–µ —á–∏—Å–ª–æ, —Ç–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–µ–µ –±–æ—Ç.\n–°—Ç—Ä–æ–≥–æ—Å—Ç—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: /strictness <10-100>.')
        await delete_after(message, tmsg)
        return
    try:
        strictness_level = int(args[1])
        if strictness_level < 10 or strictness_level > 100:
            raise ValueError
    except:
        tmsg = await message.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /strictness <10-100>.')
        await delete_after(message, tmsg)
        return
    if message.sender_chat is not None and message.sender_chat.id != message.chat.id:
        tmsg = await message.reply('–≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
        await delete_after(message, tmsg)
        logger.info(f'Sender chat: {message.sender_chat.id}')
        return
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    logger.info(f'Admin: {member.status}')
    logger.info(f'Can delete messages: {member.can_delete_messages}')
    if member.status != ChatMemberStatus.CREATOR and (member.status not in ChatMemberStatus.ADMINISTRATOR or not member.can_delete_messages):
        tmsg = await message.reply('–≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
        await delete_after(message, tmsg)
        return
    await set_strictness_level(message.chat.id, strictness_level)
    tmsg = await message.reply(f'–°—Ç—Ä–æ–≥–æ—Å—Ç—å –≤ —á–∞—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {strictness_level}.')
    await delete_after(message, tmsg)


@dp.message(F.text)
async def text_message_handler(message: Message):
    if message.chat.type == 'private':
        return
    await add_chat(message.chat.id)
    strictness_level = await get_strictness_level(message.chat.id)
    if message.from_user.is_bot:
        return
    if message.reply_to_message is None:
        return
    if not message.reply_to_message.is_automatic_forward:
        return
    orig_time = message.reply_to_message.date
    ans_time = message.date
    diff = ans_time - orig_time
    if diff.total_seconds() > SECONDS_TO_DELETE:
        return
    if message.sender_chat is None:
        bio = (await bot.get_chat(message.from_user.id)).bio
        name = message.from_user.full_name
    else:
        bio = message.sender_chat.bio
        name = message.sender_chat.title
    spam_probability = spam_bot_probability(
        name,
        bio or '',
        message.text,
        round(diff.total_seconds())
    )
    logger.info(f'Probability: {round(spam_probability * 100)}')
    if round(spam_probability * 100) >= strictness_level:
        await message.delete()
        await add_deleted(message.chat.id)


async def main():
    me = await bot.get_me()
    logger.info(f'Bot started as @{me.username}')
    await prepare_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())